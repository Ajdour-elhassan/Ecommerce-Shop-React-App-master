{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\React-Ecommerce-Website\\\\src\\\\Store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./Cart-Context\"; // State\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefaultCartState = {\n  Items: [],\n  TotalAmount: 0\n}; // Action\n\nconst cartReducer = (state, action) => {\n  // ADDING ITEM TO CART\n  if (action.type === \"ADD_TO_CART\") {\n    const UpdateTotalAmount = state.TotalAmount + action.item.price * action.item.amount; // Finding Exist idex of Item in Array , Here we check of theres is a multiple item in array\n\n    const existingIndexOfItemInCart = state.Items.findIndex(item => item.id === action.item.id); // It returns to True or false when there an Item that has the same id in the cart\n    // Looking for exiting Cart Item if Thres is already that item in array\n\n    const existingCartItem = state.Items[existingIndexOfItemInCart];\n    let UpdateItems;\n\n    if (existingCartItem) {\n      const UpdateItem = { //  Copy the old and existing objects & Updating Amount\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      }; //  Copy the old objects\n\n      UpdateItems = [...state.Items]; //  Overwriting\n\n      UpdateItems[existingIndexOfItemInCart] = UpdateItem;\n    } else {\n      UpdateItems = state.Items.concat(action.item);\n    }\n\n    return {\n      Items: UpdateItems,\n      TotalAmount: UpdateTotalAmount\n    };\n  } // REMOVING ITEM IN THE CART\n\n\n  if (action.type === \"REOMVE_ITEM\") {\n    const ExistingItemInCart = state.Items.findIndex(item => item.id === action.id);\n    const ExistingItem = state.Items[ExistingItemInCart];\n    const UpdateTotalAmount = state.TotalAmount - ExistingItem.price; //  Set a new variabel\n\n    let UpdateItems;\n\n    if (ExistingItem.amount === 1) {\n      UpdateItems = state.Items.filter(item => item.id !== action.id);\n    } else {\n      const UpdateItem = { ...ExistingItem,\n        amount: ExistingItem.amount - 1\n      };\n      UpdateItems = [...state.Items];\n      UpdateItems[ExistingItemInCart] = UpdateItem;\n    }\n\n    return {};\n  }\n\n  return DefaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  // Use Cart Reducer\n  const [cartState, DispatchCartState] = useReducer(cartReducer, DefaultCartState); // Adding Items to the Cart\n\n  const AddItemHandler = item => {\n    DispatchCartState({\n      type: \"ADD_TO_CART\",\n      item: item\n    });\n  }; // Removing items in Cart based on ID\n\n\n  const RemoveItemHandler = id => {\n    DispatchCartState({\n      type: \"REMOVE_ITEM\",\n      id: id\n    });\n  }; // CartContext Helper\n\n\n  const cartContext = {\n    Items: cartState.Items,\n    TotalAmount: cartState.TotalAmount,\n    AddItem: AddItemHandler,\n    RemoveItem: RemoveItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"UWQ+wm+DEsr/KcnPEDmgxIm96qA=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/React-Ecommerce-Website/src/Store/CartProvider.js"],"names":["useReducer","CartContext","DefaultCartState","Items","TotalAmount","cartReducer","state","action","type","UpdateTotalAmount","item","price","amount","existingIndexOfItemInCart","findIndex","id","existingCartItem","UpdateItems","UpdateItem","concat","ExistingItemInCart","ExistingItem","filter","CartProvider","props","cartState","DispatchCartState","AddItemHandler","RemoveItemHandler","cartContext","AddItem","RemoveItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./Cart-Context\";\r\n\r\n// State\r\nconst DefaultCartState = {\r\n  Items: [],\r\n  TotalAmount: 0,\r\n};\r\n// Action\r\nconst cartReducer = (state, action) => {\r\n  // ADDING ITEM TO CART\r\n  if (action.type === \"ADD_TO_CART\") {\r\n    const UpdateTotalAmount =\r\n      state.TotalAmount + action.item.price * action.item.amount;\r\n    // Finding Exist idex of Item in Array , Here we check of theres is a multiple item in array\r\n    const existingIndexOfItemInCart = state.Items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    ); // It returns to True or false when there an Item that has the same id in the cart\r\n    // Looking for exiting Cart Item if Thres is already that item in array\r\n    const existingCartItem = state.Items[existingIndexOfItemInCart];\r\n    let UpdateItems;\r\n    if (existingCartItem) {\r\n      const UpdateItem = {\r\n        //  Copy the old and existing objects & Updating Amount\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      //  Copy the old objects\r\n      UpdateItems = [...state.Items];\r\n      //  Overwriting\r\n      UpdateItems[existingIndexOfItemInCart] = UpdateItem;\r\n    } else {\r\n      UpdateItems = state.Items.concat(action.item);\r\n    }\r\n    return {\r\n      Items: UpdateItems,\r\n      TotalAmount: UpdateTotalAmount,\r\n    };\r\n  }\r\n\r\n  // REMOVING ITEM IN THE CART\r\n  if (action.type === \"REOMVE_ITEM\") {\r\n    const ExistingItemInCart = state.Items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    const ExistingItem = state.Items[ExistingItemInCart];\r\n    const UpdateTotalAmount = state.TotalAmount - ExistingItem.price;\r\n    //  Set a new variabel\r\n    let UpdateItems;\r\n    if (ExistingItem.amount === 1) {\r\n      UpdateItems = state.Items.filter((item) => item.id !== action.id);\r\n    } else {\r\n      const UpdateItem = { ...ExistingItem, amount: ExistingItem.amount - 1 };\r\n      UpdateItems = [...state.Items];\r\n      UpdateItems[ExistingItemInCart] = UpdateItem;\r\n    }\r\n    return {};\r\n  }\r\n\r\n  return DefaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  // Use Cart Reducer\r\n  const [cartState, DispatchCartState] = useReducer(\r\n    cartReducer,\r\n    DefaultCartState\r\n  );\r\n\r\n  // Adding Items to the Cart\r\n  const AddItemHandler = (item) => {\r\n    DispatchCartState({\r\n      type: \"ADD_TO_CART\",\r\n      item: item,\r\n    });\r\n  };\r\n\r\n  // Removing items in Cart based on ID\r\n  const RemoveItemHandler = (id) => {\r\n    DispatchCartState({\r\n      type: \"REMOVE_ITEM\",\r\n      id: id,\r\n    });\r\n  };\r\n\r\n  // CartContext Helper\r\n  const cartContext = {\r\n    Items: cartState.Items,\r\n    TotalAmount: cartState.TotalAmount,\r\n    AddItem: AddItemHandler,\r\n    RemoveItem: RemoveItemHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}