{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\React-Ecommerce-Website\\\\src\\\\Store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./Cart-Context\"; // State\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefaultCartState = {\n  Items: [],\n  TotalAmount: 0\n}; // Action\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_TO_CART\") {\n    const UpdateTotalAmount = state.TotalAmount + action.item.price; // Finding Exist idex of Item in Array , Here we check of theres is a multiple item in array\n\n    const ExistingIndexOfItemInCart = state.items.findIndex(item => item.id === action.item.id); // Looking for exiting Cart Item if Thres is already that item in array\n\n    const ExistingCartItem = state.items[ExistingIndexOfItemInCart];\n    let UpdateItem;\n    let UpdateItems;\n\n    if (ExistingCartItem) {\n      UpdateItem = { ...ExistingCartItem,\n        amount: ExistingCartItem.amount + action.item.amount // Updating Amount\n\n      };\n      UpdateItems = [...state.items];\n      UpdateItems = [];\n    }\n\n    return {\n      Items: UpdateItems,\n      TotalAmount: UpdateTotalAmount\n    };\n  }\n\n  return DefaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  // Use Cart Reducer\n  const [cartState, DispatchCartState] = useReducer(cartReducer, DefaultCartState); // Adding Items to the Cart\n\n  const AddItemHandler = item => {\n    DispatchCartState({\n      type: \"ADD_TO_CART\",\n      item: item\n    });\n  }; // Removing items in Cart based on ID\n\n\n  const RemoveItemHandler = id => {}; // CartContext Helper\n\n\n  const cartContext = {\n    Items: cartState.Items,\n    TotalAmount: cartState.TotalAmount,\n    AddItem: AddItemHandler,\n    RemoveItem: RemoveItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"UWQ+wm+DEsr/KcnPEDmgxIm96qA=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/React-Ecommerce-Website/src/Store/CartProvider.js"],"names":["useReducer","CartContext","DefaultCartState","Items","TotalAmount","cartReducer","state","action","type","UpdateTotalAmount","item","price","ExistingIndexOfItemInCart","items","findIndex","id","ExistingCartItem","UpdateItem","UpdateItems","amount","CartProvider","props","cartState","DispatchCartState","AddItemHandler","RemoveItemHandler","cartContext","AddItem","RemoveItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;AACjC,UAAMC,iBAAiB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAA1D,CADiC,CAEjC;;AACA,UAAMC,yBAAyB,GAAGN,KAAK,CAACO,KAAN,CAAYC,SAAZ,CAC/BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADF,CAAlC,CAHiC,CAMjC;;AACA,UAAMC,gBAAgB,GAAGV,KAAK,CAACO,KAAN,CAAYD,yBAAZ,CAAzB;AACA,QAAIK,UAAJ;AACA,QAAIC,WAAJ;;AAEA,QAAIF,gBAAJ,EAAsB;AACpBC,MAAAA,UAAU,GAAG,EACX,GAAGD,gBADQ;AAEXG,QAAAA,MAAM,EAAEH,gBAAgB,CAACG,MAAjB,GAA0BZ,MAAM,CAACG,IAAP,CAAYS,MAFnC,CAE2C;;AAF3C,OAAb;AAIAD,MAAAA,WAAW,GAAG,CAAC,GAAGZ,KAAK,CAACO,KAAV,CAAd;AACAK,MAAAA,WAAW,GAAG,EAAd;AACD;;AAED,WAAO;AACLf,MAAAA,KAAK,EAAEe,WADF;AAELd,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,SAAOP,gBAAP;AACD,CA3BD;;AA6BA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,QAAM,CAACC,SAAD,EAAYC,iBAAZ,IAAiCvB,UAAU,CAC/CK,WAD+C,EAE/CH,gBAF+C,CAAjD,CAF8B,CAO9B;;AACA,QAAMsB,cAAc,GAAId,IAAD,IAAU;AAC/Ba,IAAAA,iBAAiB,CAAC;AAChBf,MAAAA,IAAI,EAAE,aADU;AAEhBE,MAAAA,IAAI,EAAEA;AAFU,KAAD,CAAjB;AAID,GALD,CAR8B,CAe9B;;;AACA,QAAMe,iBAAiB,GAAIV,EAAD,IAAQ,CAAE,CAApC,CAhB8B,CAkB9B;;;AACA,QAAMW,WAAW,GAAG;AAClBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADC;AAElBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFL;AAGlBuB,IAAAA,OAAO,EAAEH,cAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/BD;;GAAMT,Y;;KAAAA,Y;AAiCN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./Cart-Context\";\r\n\r\n// State\r\nconst DefaultCartState = {\r\n  Items: [],\r\n  TotalAmount: 0,\r\n};\r\n// Action\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD_TO_CART\") {\r\n    const UpdateTotalAmount = state.TotalAmount + action.item.price;\r\n    // Finding Exist idex of Item in Array , Here we check of theres is a multiple item in array\r\n    const ExistingIndexOfItemInCart = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    // Looking for exiting Cart Item if Thres is already that item in array\r\n    const ExistingCartItem = state.items[ExistingIndexOfItemInCart];\r\n    let UpdateItem;\r\n    let UpdateItems;\r\n\r\n    if (ExistingCartItem) {\r\n      UpdateItem = {\r\n        ...ExistingCartItem,\r\n        amount: ExistingCartItem.amount + action.item.amount, // Updating Amount\r\n      };\r\n      UpdateItems = [...state.items];\r\n      UpdateItems = [];\r\n    }\r\n\r\n    return {\r\n      Items: UpdateItems,\r\n      TotalAmount: UpdateTotalAmount,\r\n    };\r\n  }\r\n  return DefaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  // Use Cart Reducer\r\n  const [cartState, DispatchCartState] = useReducer(\r\n    cartReducer,\r\n    DefaultCartState\r\n  );\r\n\r\n  // Adding Items to the Cart\r\n  const AddItemHandler = (item) => {\r\n    DispatchCartState({\r\n      type: \"ADD_TO_CART\",\r\n      item: item,\r\n    });\r\n  };\r\n\r\n  // Removing items in Cart based on ID\r\n  const RemoveItemHandler = (id) => {};\r\n\r\n  // CartContext Helper\r\n  const cartContext = {\r\n    Items: cartState.Items,\r\n    TotalAmount: cartState.TotalAmount,\r\n    AddItem: AddItemHandler,\r\n    RemoveItem: RemoveItemHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}